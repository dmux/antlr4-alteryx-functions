# Generated from AlteryxFunctions.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,269,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,
        1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,
        1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,14,1,14,5,14,156,8,14,10,14,12,14,159,9,14,1,14,1,14,1,15,4,15,
        164,8,15,11,15,12,15,165,1,15,1,15,4,15,170,8,15,11,15,12,15,171,
        3,15,174,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,
        185,8,16,1,17,4,17,188,8,17,11,17,12,17,189,1,17,1,17,1,18,1,18,
        1,18,5,18,197,8,18,10,18,12,18,200,9,18,1,18,1,18,1,19,1,19,1,19,
        3,19,207,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,
        1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,
        1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,
        1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,
        1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,157,
        0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,0,41,0,43,0,45,20,47,21,
        49,22,51,23,53,24,55,25,57,26,59,27,61,28,63,29,65,30,67,31,69,32,
        71,33,1,0,13,1,0,48,57,2,0,84,84,116,116,2,0,82,82,114,114,2,0,85,
        85,117,117,2,0,69,69,101,101,2,0,70,70,102,102,2,0,65,65,97,97,2,
        0,76,76,108,108,2,0,83,83,115,115,3,0,9,10,13,13,32,32,2,0,34,34,
        92,92,8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,114,116,116,
        3,0,48,57,65,70,97,102,274,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,73,
        1,0,0,0,3,75,1,0,0,0,5,77,1,0,0,0,7,80,1,0,0,0,9,85,1,0,0,0,11,90,
        1,0,0,0,13,96,1,0,0,0,15,100,1,0,0,0,17,102,1,0,0,0,19,109,1,0,0,
        0,21,119,1,0,0,0,23,126,1,0,0,0,25,135,1,0,0,0,27,144,1,0,0,0,29,
        153,1,0,0,0,31,163,1,0,0,0,33,184,1,0,0,0,35,187,1,0,0,0,37,193,
        1,0,0,0,39,206,1,0,0,0,41,208,1,0,0,0,43,214,1,0,0,0,45,216,1,0,
        0,0,47,220,1,0,0,0,49,223,1,0,0,0,51,227,1,0,0,0,53,230,1,0,0,0,
        55,233,1,0,0,0,57,235,1,0,0,0,59,237,1,0,0,0,61,240,1,0,0,0,63,243,
        1,0,0,0,65,246,1,0,0,0,67,253,1,0,0,0,69,258,1,0,0,0,71,263,1,0,
        0,0,73,74,5,40,0,0,74,2,1,0,0,0,75,76,5,41,0,0,76,4,1,0,0,0,77,78,
        5,73,0,0,78,79,5,70,0,0,79,6,1,0,0,0,80,81,5,84,0,0,81,82,5,72,0,
        0,82,83,5,69,0,0,83,84,5,78,0,0,84,8,1,0,0,0,85,86,5,69,0,0,86,87,
        5,76,0,0,87,88,5,83,0,0,88,89,5,69,0,0,89,10,1,0,0,0,90,91,5,69,
        0,0,91,92,5,78,0,0,92,93,5,68,0,0,93,94,5,73,0,0,94,95,5,70,0,0,
        95,12,1,0,0,0,96,97,5,73,0,0,97,98,5,73,0,0,98,99,5,70,0,0,99,14,
        1,0,0,0,100,101,5,44,0,0,101,16,1,0,0,0,102,103,5,83,0,0,103,104,
        5,87,0,0,104,105,5,73,0,0,105,106,5,84,0,0,106,107,5,67,0,0,107,
        108,5,72,0,0,108,18,1,0,0,0,109,110,5,84,0,0,110,111,5,79,0,0,111,
        112,5,66,0,0,112,113,5,79,0,0,113,114,5,79,0,0,114,115,5,76,0,0,
        115,116,5,69,0,0,116,117,5,65,0,0,117,118,5,78,0,0,118,20,1,0,0,
        0,119,120,5,84,0,0,120,121,5,79,0,0,121,122,5,68,0,0,122,123,5,65,
        0,0,123,124,5,84,0,0,124,125,5,69,0,0,125,22,1,0,0,0,126,127,5,84,
        0,0,127,128,5,79,0,0,128,129,5,78,0,0,129,130,5,85,0,0,130,131,5,
        77,0,0,131,132,5,66,0,0,132,133,5,69,0,0,133,134,5,82,0,0,134,24,
        1,0,0,0,135,136,5,84,0,0,136,137,5,111,0,0,137,138,5,78,0,0,138,
        139,5,117,0,0,139,140,5,109,0,0,140,141,5,98,0,0,141,142,5,101,0,
        0,142,143,5,114,0,0,143,26,1,0,0,0,144,145,5,84,0,0,145,146,5,79,
        0,0,146,147,5,83,0,0,147,148,5,84,0,0,148,149,5,82,0,0,149,150,5,
        73,0,0,150,151,5,78,0,0,151,152,5,71,0,0,152,28,1,0,0,0,153,157,
        5,34,0,0,154,156,9,0,0,0,155,154,1,0,0,0,156,159,1,0,0,0,157,158,
        1,0,0,0,157,155,1,0,0,0,158,160,1,0,0,0,159,157,1,0,0,0,160,161,
        5,34,0,0,161,30,1,0,0,0,162,164,7,0,0,0,163,162,1,0,0,0,164,165,
        1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,173,1,0,0,0,167,169,
        5,46,0,0,168,170,7,0,0,0,169,168,1,0,0,0,170,171,1,0,0,0,171,169,
        1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,0,173,167,1,0,0,0,173,174,
        1,0,0,0,174,32,1,0,0,0,175,176,7,1,0,0,176,177,7,2,0,0,177,178,7,
        3,0,0,178,185,7,4,0,0,179,180,7,5,0,0,180,181,7,6,0,0,181,182,7,
        7,0,0,182,183,7,8,0,0,183,185,7,4,0,0,184,175,1,0,0,0,184,179,1,
        0,0,0,185,34,1,0,0,0,186,188,7,9,0,0,187,186,1,0,0,0,188,189,1,0,
        0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,191,1,0,0,0,191,192,6,17,
        0,0,192,36,1,0,0,0,193,198,5,34,0,0,194,197,3,39,19,0,195,197,8,
        10,0,0,196,194,1,0,0,0,196,195,1,0,0,0,197,200,1,0,0,0,198,196,1,
        0,0,0,198,199,1,0,0,0,199,201,1,0,0,0,200,198,1,0,0,0,201,202,5,
        34,0,0,202,38,1,0,0,0,203,204,5,92,0,0,204,207,7,11,0,0,205,207,
        3,41,20,0,206,203,1,0,0,0,206,205,1,0,0,0,207,40,1,0,0,0,208,209,
        5,117,0,0,209,210,3,43,21,0,210,211,3,43,21,0,211,212,3,43,21,0,
        212,213,3,43,21,0,213,42,1,0,0,0,214,215,7,12,0,0,215,44,1,0,0,0,
        216,217,5,65,0,0,217,218,5,78,0,0,218,219,5,68,0,0,219,46,1,0,0,
        0,220,221,5,79,0,0,221,222,5,82,0,0,222,48,1,0,0,0,223,224,5,78,
        0,0,224,225,5,79,0,0,225,226,5,84,0,0,226,50,1,0,0,0,227,228,5,61,
        0,0,228,229,5,61,0,0,229,52,1,0,0,0,230,231,5,33,0,0,231,232,5,61,
        0,0,232,54,1,0,0,0,233,234,5,60,0,0,234,56,1,0,0,0,235,236,5,62,
        0,0,236,58,1,0,0,0,237,238,5,60,0,0,238,239,5,61,0,0,239,60,1,0,
        0,0,240,241,5,62,0,0,241,242,5,61,0,0,242,62,1,0,0,0,243,244,5,73,
        0,0,244,245,5,78,0,0,245,64,1,0,0,0,246,247,5,78,0,0,247,248,5,79,
        0,0,248,249,5,84,0,0,249,250,5,32,0,0,250,251,5,73,0,0,251,252,5,
        78,0,0,252,66,1,0,0,0,253,254,5,78,0,0,254,255,5,85,0,0,255,256,
        5,76,0,0,256,257,5,76,0,0,257,68,1,0,0,0,258,259,5,84,0,0,259,260,
        5,82,0,0,260,261,5,85,0,0,261,262,5,69,0,0,262,70,1,0,0,0,263,264,
        5,70,0,0,264,265,5,65,0,0,265,266,5,76,0,0,266,267,5,83,0,0,267,
        268,5,69,0,0,268,72,1,0,0,0,10,0,157,165,171,173,184,189,196,198,
        206,1,6,0,0
    ]

class AlteryxFunctionsLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    TEXT = 15
    NUMBER = 16
    BOOLEAN = 17
    WS = 18
    STRING = 19
    AND = 20
    OR = 21
    NOT = 22
    EQ = 23
    NEQ = 24
    LT = 25
    GT = 26
    LEQ = 27
    GEQ = 28
    IN = 29
    NOTIN = 30
    NULL = 31
    TRUE = 32
    FALSE = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'IF'", "'THEN'", "'ELSE'", "'ENDIF'", "'IIF'", 
            "','", "'SWITCH'", "'TOBOOLEAN'", "'TODATE'", "'TONUMBER'", 
            "'ToNumber'", "'TOSTRING'", "'AND'", "'OR'", "'NOT'", "'=='", 
            "'!='", "'<'", "'>'", "'<='", "'>='", "'IN'", "'NOT IN'", "'NULL'", 
            "'TRUE'", "'FALSE'" ]

    symbolicNames = [ "<INVALID>",
            "TEXT", "NUMBER", "BOOLEAN", "WS", "STRING", "AND", "OR", "NOT", 
            "EQ", "NEQ", "LT", "GT", "LEQ", "GEQ", "IN", "NOTIN", "NULL", 
            "TRUE", "FALSE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "TEXT", "NUMBER", "BOOLEAN", "WS", "STRING", "ESC", "UNICODE", 
                  "HEX", "AND", "OR", "NOT", "EQ", "NEQ", "LT", "GT", "LEQ", 
                  "GEQ", "IN", "NOTIN", "NULL", "TRUE", "FALSE" ]

    grammarFileName = "AlteryxFunctions.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


